name: Build and release packages

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  ZAP_TEST_TIMEOUT: 3600000
  ZAP_TEMPSTATE: 1
  BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  TRUSTED_CERTIFICATE_BASE64: ${{ secrets.TRUSTED_CERTIFICATE_BASE64 }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  KEYCHAIN_PASSWORD: silabs

jobs:
  build:
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-11, ubuntu-latest]
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3.0.0
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Prepare Linux build environment
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo ./src-script/install-packages-ubuntu

      - name: Prepare macOS build environment
        if: startsWith(matrix.os, 'macos')
        run: ./src-script/install-packages-osx

      - name: Prepare macOS certificate
        if: startsWith(matrix.os, 'macos')
        run: |
          # create variables
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          if [ -n "$P12_PASSWORD" ]; then
            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output ${RUNNER_TEMP}/build_certificate.p12
            echo -n "$TRUSTED_CERTIFICATE_BASE64" | base64 --decode --output ${RUNNER_TEMP}/trusted_certificate.cer

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import ${RUNNER_TEMP}/trusted_certificate.cer -P "$P12_PASSWORD" -k $KEYCHAIN_PATH -A
            security import ${RUNNER_TEMP}/build_certificate.p12 -P "$P12_PASSWORD" -k $KEYCHAIN_PATH -A

            security find-identity -v
            security list-keychain -d user -s $KEYCHAIN_PATH
          fi

      - name: Initialize...
        run: |
          npm rebuild canvas --update-binary
          npm rebuild libxmljs --update-binary
          npm ci
          npm run version-stamp

      - name: Building frontend / backend
        run: |
          npm run build

      - name: Build & Release for Windows / Mac universal binary on macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          npm run pack:win
          npm run pkg:win
          npm run pack:cli:win

          npm run pack:mac
          npm run pkg:mac
          npm run pack:cli:mac

        env:
          GH_TOKEN: ${{ secrets.github_token }}

          # macOS notarization API key
          # CSC_LINK: ${{ secrets.api_key_id }}
          # CSC_KEY_PASSWORD: ${{ secrets.api_key_issuer_id }}

      - name: Build & Release for Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          npm run pack:linux
          npm run pkg:linux
          npm run pack:cli:linux

        env:
          GH_TOKEN: ${{ secrets.github_token }}

          # macOS notarization API key
          # CSC_LINK: ${{ secrets.api_key_id }}
          # CSC_KEY_PASSWORD: ${{ secrets.api_key_issuer_id }}

      - name: ZAP binary check (macOS) - unzip
        if: startsWith(matrix.os, 'macos')
        run: unzip dist/zap-mac.zip -d dist/zap-mac
      - name: ZAP binary check (macOS) - check version is set
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./dist/zap-mac/zap.app/Contents/MacOS/zap --version
          contains: '0.0.0'
          expected_result: FAILED
      - name: ZAP binary check (macOS) - check version is set via CLI
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./dist/zap-mac/zap-cli --version
          contains: '0.0.0'
          expected_result: FAILED
      - name: ZAP binary check (macOS) - unzip cleanup
        if: startsWith(matrix.os, 'macos')
        run: rm -rf dist/zap-mac

      - name: ZAP binary check (Linux) - unzip
        if: startsWith(matrix.os, 'ubuntu')
        run: unzip dist/zap-linux.zip -d dist/zap-linux
      - name: ZAP binary check (Linux) - check version is set
        if: startsWith(matrix.os, 'ubuntu')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./dist/zap-linux/zap --version
          contains: '0.0.0'
          expected_result: FAILED
      - name: ZAP binary check (Linux) - check version is set via CLI
        if: startsWith(matrix.os, 'ubuntu')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./dist/zap-linux/zap-cli --version
          contains: '0.0.0'
          expected_result: FAILED
      - name: ZAP binary check (Linux) - unzip cleanup
        if: startsWith(matrix.os, 'ubuntu')
        run: rm -rf dist/zap-linux
      - name: Verify apack.json exists in package's base directory
        if: startsWith(matrix.os, 'ubuntu')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./node_modules/7zip-bin/linux/x64/7za l ./dist/zap-linux.zip | grep apack.json
          contains: 'apack.json'
      - name: Verify apack.json exists in package's app.asar archive
        if: startsWith(matrix.os, 'ubuntu')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: npx asar l ./dist/linux-unpacked/resources/app.asar | grep apack.json
          contains: 'apack.json'

      - name: Verify apack.json exists in Windows .zip package
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./node_modules/7zip-bin/mac/x64/7za l ./dist/zap-win.zip | grep apack.json
          contains: 'apack.json'
      - name: Verify apack.json exists in Windows .zip package's app.asar archive
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: npx asar l ./dist/win-unpacked/resources/app.asar | grep apack.json
          contains: 'apack.json'
      - name: Verify apack.json exists in macOS .zip package
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: ./node_modules/7zip-bin/mac/x64/7za l ./dist/zap-mac.zip | grep apack.json
          contains: 'apack.json'
      - name: Verify apack.json exists in macOS .zip package's app-x64.asar archive
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: npx asar l ./dist/mac-universal/zap.app/Contents/Resources/app-x64.asar | grep apack.json
          contains: 'apack.json'
      - name: Verify apack.json exists in macOS .zip package's app-arm64.asar archive
        if: startsWith(matrix.os, 'macos')
        uses: GuillaumeFalourd/assert-command-line-output@v2.1
        with:
          command_line: npx asar l ./dist/mac-universal/zap.app/Contents/Resources/app-arm64.asar | grep apack.json
          contains: 'apack.json'

      - name: Archive Windows .zip file
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'macos')
        with:
          name: zap-win-zip
          path: dist/zap*-win.zip
      - name: Archive macOS .zip file
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'macos')
        with:
          name: zap-mac-zip
          path: dist/zap*-mac.zip
      - name: Archive Linux .zip file
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-zip
          path: dist/zap*-linux.zip
      - name: Archive Linux .rpm file
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-rpm
          path: dist/zap*.rpm
      - name: Archive Linux .deb file
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-deb
          path: dist/zap*.deb
