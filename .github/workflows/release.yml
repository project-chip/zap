name: Build and release packages

on: push

env:
  ZAP_TEST_TIMEOUT: 3600000
  ZAP_TEMPSTATE: 1

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-11, ubuntu-latest, ubuntu-18.04]
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3.0.0
        with:
          node-version: 14.x

      - name: Prepare Linux build environment
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo ./src-script/install-packages-ubuntu
          sudo apt-get install --fix-missing xvfb

      - name: Prepare macOS build environment
        if: startsWith(matrix.os, 'macos')
        run: |
          ./src-script/install-packages-osx

          # Import Apple API key for app notarization on macOS
          mkdir -p ~/private_keys/
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

      - run: npm install
      - run: npm run version-stamp
      - run: npm rebuild canvas --update-binary
      - run: npm rebuild libxmljs --update-binary
      - run: npm run build-spa
      - run: npm run lint
        if: startsWith(matrix.os, 'ubuntu')
      - run: npm run self-check
        if: startsWith(matrix.os, 'ubuntu')
      - run: npm run gen
      - run: npm run genmatter
      - run: npm run gendotdot

      - name: Build & Release for macOS / Windows on macOS
        uses: samuelmeuli/action-electron-builder@v1.6.0
        if: startsWith(matrix.os, 'macos')
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # macOS code signing certificate
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

          args: '--windows'
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.api_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      - name: Build & Release for Linux
        uses: samuelmeuli/action-electron-builder@v1.6.0
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # macOS code signing certificate
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.api_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      - name: Setup Linux package for adapter pack test
        id: linux_apack_setup
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "::set-output name=linuxBaseDir::$(./node_modules/7zip-bin/linux/x64/7za l ./dist/zap-linux.zip | grep apack.json)"
          echo "::set-output name=linuxAsarDir::$(npx asar l ./dist/linux-unpacked/resources/app.asar | grep apack.json)"
      - name: Verify apack.json exists in Linux package .zip package
        uses: nick-fields/assert-action@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          expected: 'apack.json'
          actual: ${{ steps.linux_apack_setup.outputs.linuxBaseDir }}
          comparison: contains
      - name: Verify apack.json exists in Linux package .zip package's app.asar archive
        uses: nick-fields/assert-action@v1
        if: startsWith(matrix.os, 'ubuntu')
        with:
          expected: 'apack.json'
          actual: ${{ steps.linux_apack_setup.outputs.linuxAsarDir }}
          comparison: contains

      - name: Setup macOS/Windows package for adapter pack test
        id: nonlinux_apack_setup
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "::set-output name=winBaseDir::$(./node_modules/7zip-bin/mac/x64/7za l ./dist/zap-win.zip | grep apack.json)"
          echo "::set-output name=winAsarDir::$(npx asar l ./dist/win-unpacked/resources/app.asar | grep apack.json)"
          echo "::set-output name=macBaseDir::$(./node_modules/7zip-bin/mac/x64/7za l ./dist/zap-mac.zip | grep apack.json)"
          echo "::set-output name=macAsarDir::$(npx asar l ./dist/mac/zap.app/Contents/Resources/app.asar | grep apack.json)"
      - run: echo "${{ steps.nonlinux_apack_setup.outputs.winBaseDir }}"
      - name: Verify apack.json exists in Windows .zip package
        uses: nick-fields/assert-action@v1.1.0
        if: startsWith(matrix.os, 'macos')
        with:
          expected: 'apack.json'
          actual: ${{ steps.nonlinux_apack_setup.outputs.winBaseDir }}
          comparison: contains
      - name: Verify apack.json exists in Windows .zip package's app.asar archive
        uses: nick-fields/assert-action@v1.1.0
        if: startsWith(matrix.os, 'macos')
        with:
          expected: 'apack.json'
          actual: ${{ steps.nonlinux_apack_setup.outputs.winAsarDir }}
          comparison: contains
      - name: Verify apack.json exists in macOS .zip package
        uses: nick-fields/assert-action@v1.1.0
        if: startsWith(matrix.os, 'macos')
        with:
          expected: 'apack.json'
          actual: ${{ steps.nonlinux_apack_setup.outputs.macBaseDir }}
          comparison: contains
      - name: Verify apack.json exists in macOS .zip package's app.asar archive
        uses: nick-fields/assert-action@v1.1.0
        if: startsWith(matrix.os, 'macos')
        with:
          expected: 'apack.json'
          actual: ${{ steps.nonlinux_apack_setup.outputs.macAsarDir }}
          comparison: contains

      - name: Archive Windows .zip file
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'macos')
        with:
          name: zap-win-zip
          path: dist/zap*-win.zip
      - name: Archive macOS .zip file
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'macos')
        with:
          name: zap-mac-zip
          path: dist/zap*-mac.zip
      - name: Archive Linux .zip file
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-zip
          path: dist/zap*-linux.zip
      - name: Archive Linux .rpm file
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-rpm
          path: dist/zap*.rpm
      - name: Archive Linux .deb file
        uses: actions/upload-artifact@v2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: zap-linux-deb
          path: dist/zap*.deb
